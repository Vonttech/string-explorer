{
  "labels": {
    "methodCategories": {
      "findChar": {
        "optionLabel": "encontrar algo em um √≠ndice espec√≠fico",
        "selectedLabel": "Eu tenho um √≠ndice e quero encontrar"
      },
      "findIndex": {
        "optionLabel": "encontrar onde est√° um texto espec√≠fico na string",
        "selectedLabel": "Eu tenho um texto e quero encontrar"
      },
      "add": {
        "optionLabel": "adicionar algo",
        "selectedLabel": "Eu quero adicionar"
      },
      "remove": {
        "optionLabel": "remover algo",
        "selectedLabel": "Eu quero remover"
      },
      "replace": {
        "optionLabel": "substituir algo",
        "selectedLabel": "eu quero substituir"
      },
      "get": {
        "optionLabel": "eu quero obter uma parte dela",
        "selectedLabel": "Eu quero obter"
      },
      "other": {
        "optionLabel": "fazer outra coisa",
        "selectedLabel": "Eu quero"
      }
    }
  },
  "methods": {
    "findChar": {
      "chatAt": {
        "optionLabel": "um caractere em um √≠ndice espec√≠fico",
        "description": "Retorna o caractere encontrado em um determinado √≠dice da string.",
        "example": "const paragraph = 'C√≥digo √© poesia';<br> const index = 2;<br>console.log(`O caractere no √≠ndice ${index} √© ${paragraph.charAt(index)}`);",
        "output": "\"O caractere no √≠ndice 2 √© d\""
      },
      "codePointAt": {
        "optionLabel": "um c√≥digo unicode de um caractere em um √≠ndice espec√≠fico",
        "description": "Retorna o c√≥digo unicode de um caractere em um √≠ndice espec√≠fico.",
        "example": "const hello = 'Ol√° mundo! üòé';<br>console.log(`O c√≥digo ${hello.codePointAt(1))} √© igual ao caractere ${hello.charAt(1)}`);<br>console.log(`o c√≥digo do emoji üòé √© ${hello.codePointAt(12)}`)",
        "output": "\"O c√≥digo 108 √© igual ao caractere l\"<br>\"O c√≥digo do emoji üòé √© 128526\""
      }
    },
    "findIndex": {
      "indexOf": {
        "optionLabel": "onde est√° a primeira ocorr√™ncia do texto",
        "description": "Retorna o √≠ndice da primeira ocorr√™ncia de um determinado texto em uma string.",
        "example": "const paragraph = 'C√≥digo √© poesia';<br>console.log(`O √≠ndice de '√≥' √© ${paragraph.indexOf('√≥')}`);",
        "output": "\"O √≠ndice de '√≥' √© 1\""
      },
      "lastIndexOf": {
        "optionLabel": "onde est√° a √∫ltima ocorr√™ncia do texto",
        "description": "Retorna o √≠ndice da √∫ltima ocorr√™ncia de um determinado texto em uma string.",
        "example": "const paragraph = 'C√≥digo √© poesia';<br>console.log(`A √∫ltima ocorr√™ncia da letra 'o' est√° no √≠ndice ${paragraph.lastIndexOf('o')}`);",
        "output": "\"A √∫ltima ocorr√™ncia da letra 'o' est√° no √≠ndice 10\""
      },
      "search": {
        "optionLabel": "onde est√° a ocorr√™ncia de uma express√£o regular",
        "description": "Retorna a ocorr√™ncia de uma express√£o regular na string.",
        "example": "const paragraph = 'C√≥digo √© poesia';<br>const index = 2;<br>const code = paragraph.charCodeAt(index);<br>console.log(`The character code ${code} is equal to ${paragraph.charAt(index)}`);",
        "output": "\"The character code 100 is equal to d\""
      },
      "startsWith": {
        "optionLabel": "if a string starts with specific characters",
        "description": "Returns <code>true</code> or <code>false</code> if the string starts with given characters.",
        "example": "const paragraph = 'Code is poetry';<br>console.log(`Starts with Code? ${paragraph.startsWith('Code')}`);<br>console.log(`Starts with Poetry? ${paragraph.startsWith('Poetry')}`);",
        "output": "\"Starts with Code? true<br>Starts with Poetry? false\""
      },
      "endstWith": {
        "optionLabel": "if a string ends with specific characters",
        "description": "Returns <code>true</code> or <code>false</code> if the string ends with given characters.",
        "example": "const paragraph = 'Code is poetry';<br>console.log(`Ends with code? ${paragraph.endsWith('code')}`);<br>console.log(`Ends with poetry? ${paragraph.startsWith('poetry')}`);",
        "output": "\"Ends with code? false<br>Ends with poetry? false\""
      }
    },
    "add": {
      "concat": {
        "optionLabel": "one or more texts to a string",
        "description": "Returns a new string with the original string concatenated with the given texts.",
        "example": "const code = 'Code';<br>console.log(code.concat(' is ', 'poetry');",
        "output": "\"Code is poetry\""
      },
      "repeat": {
        "optionLabel": "repeated copies of the string",
        "description": "Returns a new string with the original text repeated a given number of times.",
        "example": "const abc = 'Abc';<br>console.log(abc.repeat(3));",
        "output": "\"AbcAbcAbc\""
      },
      "padStart": {
        "optionLabel": "the same text repeated at the beginning of a string",
        "description": "Returns a new string filled with the same text at the beginning of the string until it reaches a given length.",
        "example": "const lastDigits = '5834';<br>const maskedNumber = lastDigits.padStart(16, '*')<br>console.log(maskedNumber);",
        "output": "\"************5834\""
      },
      "padEnd": {
        "optionLabel": "the same text repeated at the end of a string",
        "description": "Returns a new string filled with the same text at the end of the string until it reaches a given length.",
        "example": "const firstDigits = '0896';<br>const maskedNumber = firstDigits.padEnd(16, '*')<br>console.log(maskedNumber);",
        "output": "\"0896************\""
      } 
    },
    "remove": {
      "trim": {
        "optionLabel": "whitespaces from a string",
        "description": "Returns a new string with all the whitespaces removed.",
        "example": "const phoneNumber = ' 12 3456 7890 ';<br>console.log(phoneNumber.trim());",
        "output": "\"1234567890\""
      },
      "trimStart": {
        "optionLabel": "whitespaces from the beginning of a string",
        "description": "Returns a new string with all the whitespaces removed from the beginning of the string.",
        "example": "const text = '  Hello world!  ';<br>console.log(text.trimStart());",
        "output": "\"Hello world!  \""
      },
      "trimEnd": {
        "optionLabel": "whitespaces from the end of a string",
        "description": "Returns a new string with all the whitespaces removed from the end of the string.",
        "example": "const text = '  Hello world!  ';<br>console.log(text.trimEnd());",
        "output": "\"  Hello world!\""
      },
      "replace": {
        "optionLabel": "the first match of a text or regular expression",
        "description": "Returns a new string with the first match of a text or regular expression replaced by another given text. This method can also be used to remove the match by replacing it with an empty string",
        "example": "const paragraph = 'Hello world!';<br>console.log(paragraph.replace(' world', '');",
        "output": "\"Hello!\""
      },
      "replaceAll": {
        "optionLabel": "all matches of a text or regular expression",
        "description": "Returns a new string with all matches of a text or regular expression replaced by another given text. This method can also be used to remove all matches by replacing them with an empty string.",
        "example": "const id = '123.456.789.00';<br>console.log(id.replaceAll('.', '');",
        "output": "\"12345678900\""
      }
    },
    "replace": {
      "replace": {
        "optionLabel": "the first match of a text or regular expression",
        "description": "Returns a new string with the first match of a text or regular expression replaced by another given text.",
        "example": "const paragraph = 'Code is poetry';<br>console.log(paragraph.replace('poetry', 'art');",
        "output": "\"Code is art\""
      },
      "replaceAll": {
        "optionLabel": "all matches of a text or regular expression",
        "description": "Returns a new string with all matches of a text or regular expression replaced by another given text.",
        "example": "const date = '26/01/2021';<br>console.log(paragraph.replaceAll('/', '-');",
        "output": "\"26-01-2021\""
      }
    },
    "get": {
      "match": {
        "optionLabel": "all matches of a regular expression",
        "description": "Returns an array with all matches of a regular expression in a string.",
        "example": "const paragraph = 'Hello World!';<br>const regex = /[A-Z]/g;<br>console.log(paragraph.match(regex));",
        "output": "[\"H\", \"W\"]"
      },
      "matchAll": {
        "optionLabel": "all matches of a regular expression, including capturing groups",
        "description": "Returns an iterator with all matches of a regular expression in a string, including capturing groups.",
        "example": "const regex = /t(e)(st(\\d?))/g;<br>const str = 'test1test2';<br>const array = [...str.matchAll(regexp)];<br>console.log(array[0]);",
        "output": "[\"test1\", \"e\", \"st1\", \"1\"]"
      },
      "slice": {
        "optionLabel": "a section of the string starting at a given index",
        "description": "Returns a new string with all the text between the given indexes.",
        "example": "const paragraph = 'Code is poetry';<br>console.log(`example 1: ${paragraph.slice(6)}`);<br>console.log(`example 2: ${paragraph.slice(0, 3)}`);<br>console.log(`example 3: ${paragraph.slice(-6)}`);",
        "output": "\"example 1: is poetry\"\n\"example 2: Code\"\n\"example 3: poetry\""
      },
      "substring": {
        "optionLabel": "a section of the string between two indexes",
        "description": "Returns a new string with all the text between the two given indexes.",
        "example": "const paragraph = 'Code is poetry';<br>console.log(`example 1: ${paragraph.slice(0, 6)}`);<br>console.log(`example 2: ${paragraph.slice(5)}`);",
        "output": "\"example 1: Code is\"\n\"example 2: is poetry\""
      }
    },
    "other": {
      "split": {
        "optionLabel": "divide the string with a given separator",
        "description": "Returns a list of substrings found between a given separator.",
        "example": "const date = '26/01/2021';<br>const dateArr = date.split('/');<br>console.log(dateArr);",
        "output": "[\"26\", \"01\", \"2021\"]"
      },
      "fromCodePoint": {
        "optionLabel": "convert unicode numbers into a string",
        "description": "Returns a string created by using the specified sequence of code points.",
        "example": "console.log(String.fromCodePoint(72, 101, 108, 108, 111, 33, 129312));",
        "output": "[\"Hello!ü§†\"]"
      },
      "toUpperCase": {
        "optionLabel": "convert all text to uppercase",
        "description": "Returns a new string with all text converted to uppercase.",
        "example": "const hello = 'Hello World!';<br>console.log(hello.toUpperCase());",
        "output": "\"HELLO WORLD!\""
      },
      "toLowerCase": {
        "optionLabel": "convert all text to lowercase",
        "description": "Returns a new string with all text converted to lowercase.",
        "example": "const hello = 'Hello World!';<br>console.log(hello.toUpperCase());",
        "output": "\"hello world!\""
      }
    }
  }
}