{
  "meta": {
  "longName": "Portugu√™s",
  "author": "kevenndc"
  },
  "labels": {
    "firstSelectLabel": "Eu tenho uma string, eu gostaria de",
    "methodTypes": {
      "findChar": {
        "optionLabel": "encontrar algo em um √≠ndice espec√≠fico",
        "selectedLabel": "Eu tenho um √≠ndice e quero encontrar"
      },
      "findIndex": {
        "optionLabel": "encontrar onde est√° um texto espec√≠fico na string",
        "selectedLabel": "Eu tenho um texto e quero saber"
      },
      "add": {
        "optionLabel": "adicionar algo",
        "selectedLabel": "Eu quero adicionar"
      },
      "remove": {
        "optionLabel": "remover algo",
        "selectedLabel": "Eu quero remover"
      },
      "replace": {
        "optionLabel": "substituir algo",
        "selectedLabel": "eu quero substituir"
      },
      "get": {
        "optionLabel": "eu quero obter uma parte dela",
        "selectedLabel": "Eu quero obter"
      },
      "other": {
        "optionLabel": "fazer outra coisa",
        "selectedLabel": "Eu quero"
      }
    }
  },
  "methods": {
    "findChar": {
      "chatAt": {
        "optionLabel": "um caractere em um √≠ndice espec√≠fico",
        "description": "Retorna o caractere encontrado em um determinado √≠dice da string.",
        "example": "const paragraph = 'C√≥digo √© poesia';<br> const index = 2;<br>console.log(`O caractere no √≠ndice ${index} √© ${paragraph.charAt(index)}`);",
        "output": "\"O caractere no √≠ndice 2 √© d\""
      },
      "codePointAt": {
        "optionLabel": "um c√≥digo unicode de um caractere em um √≠ndice espec√≠fico",
        "description": "Retorna o c√≥digo unicode de um caractere em um √≠ndice espec√≠fico.",
        "example": "const hello = 'Ol√° mundo! üòé';<br>console.log(`O c√≥digo ${hello.codePointAt(1))} √© igual ao caractere ${hello.charAt(1)}`);<br>console.log(`o c√≥digo do emoji üòé √© ${hello.codePointAt(12)}`)",
        "output": "\"O c√≥digo 108 √© igual ao caractere l\"<br>\"O c√≥digo do emoji üòé √© 128526\""
      }
    },
    "findIndex": {
      "indexOf": {
        "optionLabel": "onde est√° a primeira ocorr√™ncia do texto",
        "description": "Retorna o √≠ndice da primeira ocorr√™ncia de um determinado texto em uma string.",
        "example": "const paragraph = 'C√≥digo √© poesia';<br>console.log(`O √≠ndice de '√≥' √© ${paragraph.indexOf('√≥')}`);",
        "output": "\"O √≠ndice de '√≥' √© 1\""
      },
      "lastIndexOf": {
        "optionLabel": "onde est√° a √∫ltima ocorr√™ncia do texto",
        "description": "Retorna o √≠ndice da √∫ltima ocorr√™ncia de um determinado texto em uma string.",
        "example": "const paragraph = 'C√≥digo √© poesia';<br>console.log(`A √∫ltima ocorr√™ncia da letra 'o' est√° no √≠ndice ${paragraph.lastIndexOf('o')}`);",
        "output": "\"A √∫ltima ocorr√™ncia da letra 'o' est√° no √≠ndice 10\""
      },
      "search": {
        "optionLabel": "onde est√° a ocorr√™ncia de uma express√£o regular",
        "description": "Retorna o primeiro √≠ndice da ocorr√™ncia de uma express√£o regular na string.",
        "example": "const paragraph = 'itens: item1 item2 item3';<br>console.log(`√≠ndice inicial do primeiro item: paragraph.search(/item[1-9]/g)`);",
        "output": "\"√≠ndice inicial do primeiro item: 6\""
      },
      "startsWith": {
        "optionLabel": "se uma string come√ßa com caracteres expec√≠ficos",
        "description": "Retorna <code>true</code> ou <code>false</code> se uma string come√ßar com os caracteres determinados.",
        "example": "const paragraph = 'C√≥digo √© poesia';<br>console.log(`Come√ßa com C√≥digo? ${paragraph.startsWith('C√≥digo')}`);<br>console.log(`Come√ßa com poesia? ${paragraph.startsWith('poesia')}`);",
        "output": "\"Come√ßa com C√≥digo? true<br>Come√ßa com poesia? false\""
      },
      "endstWith": {
        "optionLabel": "se uma string termina com caracteres espec√≠ficos",
        "description": "Retorna <code>true</code> ou <code>false</code> se uma string terminar com os caracteres determinados.",
        "example": "const paragraph = 'C√≥digo √© poesia';<br>console.log(`Termina com c√≥digo? ${paragraph.endsWith('code')}`);<br>console.log(`Termina com poesia? ${paragraph.startsWith('poesia')}`);",
        "output": "\"Termina com c√≥digo? false<br>Termina com poesia? true\""
      }
    },
    "add": {
      "concat": {
        "optionLabel": "um ou mais textos √† string",
        "description": "Retorna uma nova string com o texto da string original concatenado com os textos especificados.",
        "example": "const code = 'C√≥digo';<br>console.log(code.concat(' √© ', 'poesia');",
        "output": "\"C√≥digo √© poesia\""
      },
      "repeat": {
        "optionLabel": "c√≥pias repetidas da mesma string",
        "description": "Retorna uma nova string com o texto original da string repetido um n√∫mero espec√≠fico de vezes.",
        "example": "const abc = 'Abc';<br>console.log(abc.repeat(3));",
        "output": "\"AbcAbcAbc\""
      },
      "padStart": {
        "optionLabel": "um mesmo texto se repetindo no in√≠cio da string",
        "description": "Retorna uma nova string com um mesmo texto se repetindo no in√≠cio da string at√© ela atingir um tamanho limite espec√≠fico.",
        "example": "const lastDigits = '5834';<br>const maskedNumber = lastDigits.padStart(16, '*')<br>console.log(maskedNumber);",
        "output": "\"************5834\""
      },
      "padEnd": {
        "optionLabel": "m mesmo texto se repetindo no final",
        "description": "Retorna uma nova string com um mesmo texto se repetindo no final da string at√© ela atingir um tamanho limite espec√≠fico.",
        "example": "const firstDigits = '0896';<br>const maskedNumber = firstDigits.padEnd(16, '*')<br>console.log(maskedNumber);",
        "output": "\"0896************\""
      } 
    },
    "remove": {
      "trim": {
        "optionLabel": "todos os espa√ßos em branco da string",
        "description": "Retorna uma nova string com todos os espa√ßos em branco removidos.",
        "example": "const phoneNumber = ' 12 3456 7890 ';<br>console.log(phoneNumber.trim());",
        "output": "\"1234567890\""
      },
      "trimStart": {
        "optionLabel": "todos os espa√ßos em branco do in√≠cio da string",
        "description": "Retorna uma nova string com todos os espa√ßos em branco do √≠nicio.",
        "example": "const text = '  Ol√° mundo!  ';<br>console.log(text.trimStart());",
        "output": "\"Ol√° mundo!  \""
      },
      "trimEnd": {
        "optionLabel": "todos os espa√ßos em branco do final da string",
        "description": "Retorna uma nova string com todos os espa√ßos em branco do final",
        "example": "const text = '  Ol√° mundo!  ';<br>console.log(text.trimEnd());",
        "output": "\"  Ol√° mundo!\""
      },
      "replace": {
        "optionLabel": "a primeira ocorr√™ncia de um texto ou express√£o regular",
        "description": "Retorna uma nova string com a primeira ocorr√™ncia de um texto ou express√£o regular substitu√≠da por outro texto espec√≠fico. Esse m√©todo tamb√©m pode ser usado para remover a ocorr√™ncia ao passar uma string vazia para substitu√≠-la.",
        "example": "const paragraph = 'Ol√° mundo!';<br>console.log(paragraph.replace(' mundo', '');",
        "output": "\"Ol√°!\""
      },
      "replaceAll": {
        "optionLabel": "todas as ocorr√™ncias de um texto ou express√£o regular",
        "description": "Retorna uma nova string com todas as ocorr√™ncias de um texto ou express√£o regular substitu√≠das por outro texto espec√≠fico. Esse m√©todo tamb√©m pode ser usado para remover a ocorr√™ncia ao passar uma string vazia para substitu√≠-la.",
        "example": "const id = '123.456.789.00';<br>console.log(id.replaceAll('.', '');",
        "output": "\"12345678900\""
      }
    },
    "replace": {
      "replace": {
        "optionLabel": "a primeira ocorr√™ncia de um texto ou express√£o regular",
        "description": "Retorna uma nova string com a primeira ocorr√™ncia de um texto ou express√£o regular substitu√≠da por outro texto espec√≠fico.",
        "example": "const paragraph = 'C√≥digo √© poesia';<br>console.log(paragraph.replace('poesia', 'arte');",
        "output": "\"C√≥digo √© arte\""
      },
      "replaceAll": {
        "optionLabel": "todas as ocorr√™ncias de um texto ou express√£o regular",
        "description": "Retorna uma nova string com todas as ocorr√™ncias de um texto ou express√£o regular substitu√≠das por outro texto espec√≠fico.",
        "example": "const date = '26/01/2021';<br>console.log(paragraph.replaceAll('/', '-');",
        "output": "\"26-01-2021\""
      }
    },
    "get": {
      "match": {
        "optionLabel": "todas as ocorr√™ncias de uma express√£o regula.",
        "description": "Retorna um array com todas as ocorr√™ncias da express√£o regular na string.",
        "example": "const paragraph = 'Ol√° Mundo!';<br>const regex = /[A-Z]/g;<br>console.log(paragraph.match(regex));",
        "output": "[\"O\", \"M\"]"
      },
      "matchAll": {
        "optionLabel": "todas as ocorr√™ncias de uma express√£o regular, incluindo grupos",
        "description": "Retorna um iterados com todas as ocorr√™ncias da express√£o regular, incluindo as ocorr√™ncias de grupos de captura.",
        "example": "const regex = /t(e)(st(\\d?))/g;<br>const str = 'test1test2';<br>const array = [...str.matchAll(regexp)];<br>console.log(array[0]);",
        "output": "[\"test1\", \"e\", \"st1\", \"1\"]"
      },
      "slice": {
        "optionLabel": "uma se√ß√£o da string a come√ßar por uma posi√ß√£o",
        "description": "Retorna uma nova string com todo o texto a partir de uma posi√ß√£o espec√≠fica.",
        "example": "const paragraph = 'C√≥digo √© poesia';<br>console.log(`exemplo 1: ${paragraph.slice(7)}`);<br>console.log(`exemplo 2: ${paragraph.slice(-6)}`);",
        "output": "\"example 1: √© poesia\"<br>\"example 2: poesia\""
      },
      "substring": {
        "optionLabel": "uma se√ß√£o da string entre dois √≠ndices",
        "description": "Retorna uma nova string com todo o texto entre dois √≠ndices espec√≠ficos de uma string.",
        "example": "const paragraph = 'C√≥digo √© poesia';<br>console.log(`exemplo 1: ${paragraph.slice(0, 8)}`);<br>console.log(`exemplo 2: ${paragraph.slice(9, 15)}`);",
        "output": "\"exemplo 1: C√≥digo √©\"<br>\"exemplo 2: poesia\""
      }
    },
    "other": {
      "split": {
        "optionLabel": "dividir uma string com um separador",
        "description": "Retorna uma lista de strings encontradas entre o texto espec√≠ficado como separador.",
        "example": "const date = '26/01/2021';<br>const dateArr = date.split('/');<br>console.log(dateArr);",
        "output": "[\"26\", \"01\", \"2021\"]"
      },
      "fromCodePoint": {
        "optionLabel": "converter um c√≥digo Unicode em texto",
        "description": "Retorna uma string criada utilizando a sequ√™ncia de c√≥digos especificada.",
        "example": "console.log(String.fromCodePoint(79, 108, 225, 33, 129312));",
        "output": "[\"Ol√°!ü§†\"]"
      },
      "toUpperCase": {
        "optionLabel": "converter todo texto para caixa alta",
        "description": "Retorna uma nova string com todo o texto convertido para caixa alta.",
        "example": "const hello = 'Ol√° mundo!';<br>console.log(hello.toUpperCase());",
        "output": "\"OL√Å MUNDO!\""
      },
      "toLowerCase": {
        "optionLabel": "converter todo texto para caixa baixa",
        "description": "Retorna uma nova string com todo o texto convertido para caixa baixa.",
        "example": "const hello = 'Ol√° mundo!';<br>console.log(hello.toLowerCase());",
        "output": "\"ol√° mundo!\""
      }
    }
  }
}