{
  "meta": {
    "longName": "English",
    "author": "kevenndc"
  },
  "labels": {
    "language": "Language",
    "firstSelectLabel": "I have a string, I would like to",
    "seeDocs": "see the docs",
    "example": "Exemple",
    "output": "Output",
    "methodTypes": {
      "add": {
        "optionLabel": "add something",
        "selectedLabel": "I want to add"
      },
      "remove": { 
        "optionLabel": "remove something",
        "selectedLabel": "I want to remove"
      },
      "replace": {
        "optionLabel": "replace something",
        "selectedLabel": "I want to replace"
      },
      "get": {
        "optionLabel": "get some parts of it",
        "selectedLabel": "I want to get"
      },
      "has": {
        "optionLabel": "know if it has a specific text",
        "selectedLabel": "I want to know if the string"
      },
      "findChar": {
        "optionLabel": "find something in a specific index",
        "selectedLabel": "I have an index and want to find"
      },
      "findIndex": {
        "optionLabel": "find where is a specific text in the string",
        "selectedLabel": "I have a text and want to find out"
      },
      "convert": {
        "optionLabel": "convert",
        "selectedLabel": "I want to convert"
      }
    }
  },
  "methods": {
    "add": {
      "concat": {
        "optionLabel": "one or more texts to a string",
        "description": "Returns a new string with the original string concatenated with the given texts.",
        "example": "const code = 'Code'; \n console.log(code.concat(' is ', 'poetry');",
        "output": "\"Code is poetry\""
      },
      "repeat": {
        "optionLabel": "repeated copies of the string",
        "description": "Returns a new string with the original text repeated a given number of times.",
        "example": "const abc = 'Abc'; \n console.log(abc.repeat(3));",
        "output": "\"AbcAbcAbc\""
      },
      "padStart": {
        "optionLabel": "some text repeated at the beginning of a string",
        "description": "Returns a new string filled with the same text at the beginning of the string until it reaches a given length.",
        "example": "const lastDigits = '5834'; \n const maskedNumber = lastDigits.padStart(16, '*'); \n console.log(maskedNumber);",
        "output": "\"************5834\""
      },
      "padEnd": {
        "optionLabel": "some text repeated at the end of a string",
        "description": "Returns a new string filled with the same text at the end of the string until it reaches a given length.",
        "example": "const firstDigits = '0896'; \n const maskedNumber = firstDigits.padEnd(16, '*') \n console.log(maskedNumber);",
        "output": "\"0896************\""
      } 
    },
    "remove": {
      "trim": {
        "optionLabel": "all whitespaces",
        "description": "Returns a new string with all the whitespaces removed.",
        "example": "const phoneNumber = ' 12 3456 7890 '; \n console.log(phoneNumber.trim());",
        "output": "\"1234567890\""
      },
      "trimStart": {
        "optionLabel": "all whitespaces from the beginning of the string",
        "description": "Returns a new string with all the whitespaces removed from the beginning of the string.",
        "example": "const text = '  Hello world!  '; \n console.log(text.trimStart());",
        "output": "\"Hello world!  \""
      },
      "trimEnd": {
        "optionLabel": "all whitespaces from the end of the string",
        "description": "Returns a new string with all the whitespaces removed from the end of the string.",
        "example": "const text = '  Hello world!  '; \n console.log(text.trimEnd());",
        "output": "\"  Hello world!\""
      },
      "replace": {
        "optionLabel": "the first match of a text or regular expression",
        "description": "Returns a new string with the first match of a text or regular expression replaced by another given text. This method can also be used to remove the match by replacing it with an empty string.",
        "example": "const paragraph = 'Hello world!'; \n console.log(paragraph.replace(' world', '');",
        "output": "\"Hello!\""
      },
      "replaceAll": {
        "optionLabel": "all matches of a text or regular expression",
        "description": "Returns a new string with all matches of a text or regular expression replaced by another given text. This method can also be used to remove all matches by replacing them with an empty string.",
        "example": "const id = '123.456.789.00'; \n console.log(id.replaceAll('.', '');",
        "output": "\"12345678900\""
      }
    },
    "replace": {
      "replace": {
        "optionLabel": "the first match of a text or regular expression",
        "description": "Returns a new string with the first match of a text or regular expression replaced by another given text.",
        "example": "const paragraph = 'Code is poetry'; \n console.log(paragraph.replace('poetry', 'art');",
        "output": "\"Code is art\""
      },
      "replaceAll": {
        "optionLabel": "all matches of a text or regular expression",
        "description": "Returns a new string with all matches of a text or regular expression replaced by another given text.",
        "example": "const date = '26/01/2021'; \n console.log(paragraph.replaceAll('/', '-');",
        "output": "\"26-01-2021\""
      }
    },
    "get": {
      "match": {
        "optionLabel": "all matches of a regular expression",
        "description": "Returns an array with all matches of a regular expression in a string.",
        "example": "const paragraph = 'Hello World!'; \n const regex = /[A-Z]/g; \n console.log(paragraph.match(regex));",
        "output": "[\"H\", \"W\"]"
      },
      "matchAll": {
        "optionLabel": "all matches of a regular expression, including capturing groups",
        "description": "Returns an iterator with all matches of a regular expression in a string, including capturing groups matches.",
        "example": "const regex = /t(e)(st(\\d?))/g; \n const str = 'test1test2'; \n const array = [...str.matchAll(regex)]; \n console.log(array[0]);",
        "output": "[\"test1\", \"e\", \"st1\", \"1\"]"
      },
      "slice": {
        "optionLabel": "a part of the string starting at a given index",
        "description": "Returns a new string with all the text between the given indexes.",
        "example": "const paragraph = 'Code is poetry'; \n console.log(paragraph.slice(5)); \n console.log(paragraph.slice(-6));",
        "output": "\"is poetry\" \n \"poetry\""
      },
      "substring": {
        "optionLabel": "a part of the string between two indexes",
        "description": "Returns a new string with all the text between the two given indexes.",
        "example": "const paragraph = 'Code is poetry'; \n console.log(paragraph.substring(0, 7)); \n console.log(paragraph.substring(8, 14));",
        "output": "\"Code is\" \n \"poetry\""
      }
    },
    "has": {
      "includes": {
        "optionLabel": "includes a specific text",
        "description": "Returns <code>true</code> or <code>false</code> if the string contains the given text.",
        "example": "const paragraph = 'Code is poetry'; \n console.log(paragraph.includes('Code')); \n console.log(paragraph.includes('hello'));",
        "output": "true \n false"
      },
      "startsWith": {
        "optionLabel": "starts with a specific text",
        "description": "Returns <code>true</code> or <code>false</code> if the string starts with given characters.",
        "example": "const paragraph = 'Code is poetry'; \n console.log(paragraph.startsWith('Code')); \n console.log(paragraph.startsWith('Poetry'));",
        "output": "true \n false"
      },
      "endsWith": {
        "optionLabel": "ends with a specific text",
        "description": "Returns <code>true</code> or <code>false</code> if the string ends with given characters.",
        "example": "const paragraph = 'Code is poetry'; \n console.log(paragraph.endsWith('code')); \n console.log(paragraph.startsWith('poetry'));",
        "output": "false \n true"
      }
    },
    "findChar": {
      "charAt": {
        "optionLabel": "a character in a given index",
        "description": "Returns a single character in a given index of the string.",
        "example": "const paragraph = 'Code is poetry'; \n  const index = 2; \n console.log(paragraph.charAt(index));",
        "output": "\"d\""
      },
      "codePointAt": {
        "optionLabel": "a character's Unicode number in a given index",
        "description": "Returns the character unicode identifier in a given index of the string.",
        "example": "const hello = 'Hello world! ðŸ˜Ž'; \n console.log('ðŸ˜Ž = '+ hello.codePointAt(13));",
        "output": "\"ðŸ˜Ž = 128526\""
      }
    },
    "findIndex": {
      "indexOf": {
        "optionLabel": "where is the first occurrence of a text",
        "description": "Returns the index of the first occurrence a given text in the string.",
        "example": "const paragraph = 'Code is poetry'; \n console.log(paragraph.indexOf('d'));",
        "output": "2"
      },
      "lastIndexOf": {
        "optionLabel": "where is the last occurrence of a text",
        "description": "Returns the index of the last occurrence a given text in the string.",
        "example": "const paragraph = 'Code is poetry'; \n console.log(paragraph.lastIndexOf('o'));",
        "output": "9"
      },
      "search": {
        "optionLabel": "where is the occurrence of a regular expression",
        "description": "Returns the first index of the occurrence of a regular expression on a string.",
        "example": "const paragraph = 'items: item1 item2 item3'; \n console.log(paragraph.search(/item[1-9]/g));",
        "output": "7"
      }
    },
    "convert": {
      "split": {
        "optionLabel": "the string to an array with a given separator",
        "description": "Returns a list of strings found between a given separator.",
        "example": "const date = '26/01/2021'; \n const dateArr = date.split('/'); \n console.log(dateArr);",
        "output": "[\"26\", \"01\", \"2021\"]"
      },
      "fromCodePoint": {
        "optionLabel": "Unicode into a string",
        "description": "Returns a string created by using the specified sequence of code points.",
        "example": "console.log(String.fromCodePoint(72, 101, 108, 108, 111, 33, 129312));",
        "output": "\"Hello!ðŸ¤ \""
      },
      "toUpperCase": {
        "optionLabel": "all text to uppercase",
        "description": "Returns a new string with all text converted to uppercase.",
        "example": "const hello = 'Hello world!'; \n console.log(hello.toUpperCase());",
        "output": "\"HELLO WORLD!\""
      },
      "toLowerCase": {
        "optionLabel": "all text to lowercase",
        "description": "Returns a new string with all text converted to lowercase.",
        "example": "const hello = 'Hello world!'; \n console.log(hello.toLowerCase());",
        "output": "\"hello world!\""
      }
    }
  }
}